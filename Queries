Basic Queries
If the customer wants to see details of product present in the cart

select * from product where product_id in(
        select product_id from Cart_item where (Cart_id in (
            select Cart_id from Customer where Customer_id='cid100'
        ))
    and purchased='NO');
    
If a customer wants to see order history

select product_id,Quantity_wished from Cart_item where (purchased='Y' and Cart_id in (select Cart_id from customer where Customer_id='cid101'));

Customer wants to see filtered products on the basis of size,gender,type

select product_id, color, cost, seller_id from product where (type='jeans' and p_size='32' and gender='F' and quantity>0)

If customer wants to modify the cart

delete from cart_item where (product_id='pid1001' and Cart_id in (select cart_id from Customer where Customer_id='cid100'));

If a seller stops selling his product

    delete  from seller where seller_id = 'sid100';
    update product set quantity = 00 where seller_id is NULL;
 
If admin want to see what are the product purchased on the particular date

    select product_id from cart_item where (purchased='Y' and date_added='12-dec-2018');

How much product sold on the particular date

    select count(product_id) count_pid,date_added from Cart_item where purchased='Y'  group by(date_added);

If a customer want to know the total price present in the cart

    select sum(quantity_wished * cost) total_payable from product p join cart_item c on p.product_id=c.product_id where c.product_id in (select product_id from cart_item where cart_id in(select Cart_id from customer where customer_id='cid101') and purchased=’Y’);

Show the details of the customer who has not purchased any thing

    Select * from customer where customer_id not in (select customer_id from Payment);

Find total profit of the website from sales.

    select sum(quantity_wished * cost * commission/100) total_profit from product p join cart_item c on p.product_id=c.product_id where purchased=’Y’;


PL/SQL function

Procedure which returns the type of product with the cost less than the given cost

    create or replace procedure cost_filter(c in number,t in varchar)
    is
    cs product.cost%type;
    ty product.type%type;
    id product.product_id%type;
    cursor cf is
    select product_id,cost,type from product where cost<c and type=t;
    begin
    open cf;
    loop
    fetch cf into id,cs,ty;
    exit when cf%notfound;
    dbms_output.put_line('Product' || id || 'has cost ' || cs || ' and the type is' || ty);
    end loop;
    close cf;
    exception
    when no_data_found then
    dbms_output.put_line('Sorry no such products exist');
    end;

Function which returns total number of products which a particular seller sells

    create or replace function totalProducts(sId in varchar)
    return number
    is
    total number(2):=0;
    begin
    select count(*) into total
    from product
    where seller_id=sId;
    return total;
    end;
    /
    
Function execution:

    declare
    c number(2);
    begin
    c:=totalProducts('sid102');
    dbms_output.put_line('Total products is : '|| c);
    end;
    
Procedure which returns the total quantity of product with the given ID

Procedure with exception handling

    create or replace procedure prod_details(p_id in varchar)
    is
    quan number(2);
    begin
    select quantity into quan from product where product_id=p_id;
    exception
    when no_data_found then
    dbms_output.put_line('Sorry no such product exist !!');
    end;
    /
    
Triggers

Trigger that will execute before inserting new customer to database and inserting a new cartId to the cart_items table

Function to count number of cart items

    create or replace function numCartId(cd in varchar)
    return number
    is
    total number(2):=0;
    begin
    select count(*) into total
    from cart_item
    where cart_id=cd;
    return total;
    end;
    Trigger
    Create or replace trigger before_customer
    before insert
    on
    customer
    for each row
    declare
    c varchar(10);
    n number(2);
    begin
    c:= :new.cart_id;
    n:=numCartId(c);
    if n>0 then
    dbms_output.put_line('Sorry');
    end if;
    insert into cart values(c);
    end;
    
Trigger to update the total amount of user everytime he adds something to payment table

    create or replace function total_cost(cId in varchar)
    return number
    is
    total number(2) :=0;
    begin
    select sum(cost) into total from product,cart_item where product.product_id=cart_item.product_id and cart_id=cId;
    return total;
    end;

    create or replace trigger before_pay_up
    before insert
    on
    payment
    for each row
    declare
    total number(3);
    begin
    total :=total_cost(:new.cart_id);
    insert into payment values(:new.payment_id,:new.payment_date,:new.payment_type,:new.customer_id,:new.cart_id,total);
    end;
